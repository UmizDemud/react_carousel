{"version":3,"sources":["components/Carousel.tsx","components/Options/Input/Input.tsx","components/Options/Options.tsx","App.tsx","index.tsx"],"names":["Carousel","state","selected","size","props","images","length","prevProps","infinite","this","setState","prev","step","frameSize","list","itemWidth","animationDuration","determineHidden","index","i","determineTransform","widthScalar","className","style","height","width","left","map","img","transform","transition","opacity","src","alt","toString","onClick","handlePrev","type","disabled","handleNext","React","Component","Input","useState","error","setError","name","id","value","handleChange","dimensionChecks","e","val","parseInt","target","htmlFor","onChange","placeholder","checked","Options","sS","inputs","Number","Boolean","inp","App","setStep","setFrameSize","setItemWidth","setAnimationDuration","setInfinite","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cfc1a7b.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  selected: number;\n  size: number;\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    selected: 0,\n    size: this.props.images.length || 0,\n  };\n\n  componentDidUpdate(prevProps: Readonly<Props>): void {\n    if (prevProps.infinite !== this.props.infinite) {\n      this.setState({\n        selected: 0,\n      });\n    }\n  }\n\n  handlePrev(): void {\n    this.setState((prev => {\n      let selected;\n\n      if (this.props.infinite) {\n        selected = prev.selected - this.props.step < 0\n          ? prev.selected - this.props.step + prev.size\n          : prev.selected - this.props.step;\n      } else {\n        selected = prev.selected - this.props.step <= 0\n          ? 0\n          : prev.selected - this.props.step;\n      }\n\n      return {\n        selected,\n      };\n    }));\n  }\n\n  handleNext(): void {\n    this.setState((prev => {\n      let selected;\n\n      if (this.props.infinite) {\n        selected = (prev.selected + this.props.step >= prev.size\n          ? prev.selected + this.props.step - prev.size\n          : prev.selected + this.props.step);\n      } else {\n        selected = (prev.selected + this.props.step\n          > prev.size - this.props.frameSize)\n          ? prev.size - this.props.frameSize\n          : prev.selected + this.props.step;\n      }\n\n      return {\n        selected,\n      };\n    }));\n  }\n\n  render() {\n    const {\n      itemWidth,\n      frameSize,\n      animationDuration,\n      infinite,\n      images,\n    } = this.props;\n\n    const {\n      selected,\n      size,\n    } = this.state;\n\n    const determineHidden = (index: number) => {\n      for (let i = 0; i < frameSize; i += 1) {\n        if (selected + i >= size) {\n          if (selected + i - size === index) {\n            return 1;\n          }\n        } else if (selected + i === index) {\n          return 1;\n        }\n      }\n\n      return 0;\n    };\n\n    const determineTransform = (index: number) => { // selected: 9, index: 2\n      const widthScalar = itemWidth / 13;\n\n      for (let i = 0; i < frameSize; i += 1) {\n        if (selected + i >= size) {\n          if (selected + i - size === index) {\n            return `rotateY(${-widthScalar + ((i * 2 * widthScalar) / (frameSize - 1))}deg)`;\n          }\n        } else if (selected + i === index) {\n          return `rotateY(${-widthScalar + ((i * 2 * widthScalar) / (frameSize - 1))}deg)`;\n        }\n      }\n\n      if (selected - this.props.step < 0) {\n        if (selected - this.props.step + size <= index) {\n          return 'rotateY(-180deg)';\n        }\n      }\n\n      if (selected + frameSize + this.props.step >= size) {\n        if (index <= selected + frameSize + this.props.step - size) {\n          return 'rotateY(180deg)';\n        }\n      }\n\n      if (index < selected) {\n        return 'rotateY(-180deg)';\n      }\n\n      if (index > selected + frameSize) {\n        return 'rotateY(180deg)';\n      }\n\n      return 'rotateY(180deg)';\n    };\n\n    let list;\n\n    if (infinite) {\n      list = (\n        <ul\n          className=\"Carousel__list-inf\"\n          style={{\n            height: `${itemWidth}px`,\n            width: `${itemWidth * frameSize * 1.3}px`,\n            left: `${(itemWidth * frameSize * 1.3) / 2}px`,\n          }}\n        >\n          {images.map((img, i) => (\n            <li\n              key={(i + 1).toString()}\n              className=\"Carousel__item-inf\"\n              style={{\n                transform: determineTransform(i),\n                transition: `transform ${animationDuration}s,\n                  opacity ${animationDuration}s ease-in-out`,\n                opacity: determineHidden(i),\n              }}\n            >\n              <img\n                width={itemWidth}\n                height={itemWidth}\n                src={img}\n                alt={(i + 1).toString()}\n              />\n            </li>\n          ))}\n        </ul>\n      );\n    } else {\n      list = (\n        <div\n          className={`Carousel__wrapper${infinite ? ' Carousel__wrapper-inf' : ''}`}\n          style={{ width: `${frameSize * itemWidth}px` }}\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translateX(-${selected * itemWidth}px)`,\n              transition: `transform ${animationDuration}s`,\n            }}\n          >\n            {images.map((img, i) => (\n              <li\n                key={(i + 1).toString()}\n                className=\"Carousel__item\"\n              >\n                <img\n                  width={itemWidth}\n                  height={itemWidth}\n                  src={img}\n                  alt={(i + 1).toString()}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Carousel\">\n        {list}\n\n        <div>\n          <button\n            className=\"Carousel__button\"\n            onClick={() => this.handlePrev()}\n            type=\"button\"\n            disabled={selected === 0 && !infinite}\n          >\n            Prev\n          </button>\n          <button\n            className=\"Carousel__button\"\n            data-cy=\"next\"\n            onClick={() => this.handleNext()}\n            type=\"button\"\n            disabled={selected >= size - frameSize\n              && !infinite}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n\n/**\n * A function to determine where the incoming items should be directed from.\n * Let's see if it will be implemented.\n  setPositions(towards: boolean) {\n    const {\n      frameSize,\n      step,\n      images,\n    } = this.props;\n\n    const {\n      size,\n      selected,\n    } = this.state;\n\n    this.setState({\n      position: images.map((_el, i) => {\n        if (towards) {\n          if (i >= selected + frameSize) {\n            if (selected + frameSize + step > size) {\n              if (selected + frameSize + step - size > i) {\n                return true;\n              }\n            } else {\n              return true;\n            }\n          }\n        }\n\n        if (i < selected) {\n          if (selected - step < 0) {\n            if (selected - step + size < i) {\n              return true;\n            }\n          } else {\n            return true;\n          }\n        }\n\n        return false;\n      }),\n    });\n  }\n\n */\n","import React, { useState } from 'react';\n\ntype Props = {\n  props: {\n    type: 'number' | 'boolean';\n    name: string;\n    id: string;\n    value: number | boolean;\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  }\n};\n\nexport const Input = ({ props }: Props) => {\n  const [error, setError] = useState(false);\n\n  const {\n    type,\n    name,\n    id,\n    value,\n    handleChange,\n  } = props;\n\n  const dimensionChecks = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const val = parseInt(e.target.value, 10);\n\n    if (name === 'Step') {\n      if (!val || (val >= 0 && val <= 5)) {\n        setError(false);\n        handleChange(e);\n      } else {\n        setError(true);\n      }\n    } else if (name === 'Frame size') {\n      if (!val || (val >= 0 && val <= 5)) {\n        setError(false);\n        handleChange(e);\n      } else {\n        setError(true);\n      }\n    } else if (name === 'Item width') {\n      if (!val || val >= 0) {\n        setError(false);\n        handleChange(e);\n      } else {\n        setError(true);\n      }\n    } else if (name === 'Animation duration') {\n      if (!val || val >= 0) {\n        setError(false);\n        handleChange(e);\n      } else {\n        setError(true);\n      }\n    } else {\n      handleChange(e);\n    }\n  };\n\n  if (type === 'number') {\n    return (\n      <label\n        htmlFor={`${id}Id`}\n        className={`Options__label${error ? ' Options__error' : ''}`}\n      >\n        {name}\n        :\n        <input\n          className=\"Options__input\"\n          onChange={(e) => dimensionChecks(e)}\n          placeholder={value.toString()}\n          type={type}\n          name={name}\n          id={`${id}Id`}\n        />\n      </label>\n    );\n  }\n\n  if (type === 'boolean') {\n    return (\n      <label\n        htmlFor={`${id}Id`}\n        className=\"Options__label\"\n      >\n        Infinite:\n        <input\n          className=\"Options__input\"\n          onChange={(e) => dimensionChecks(e)}\n          checked={value as boolean}\n          type=\"checkbox\"\n          name=\"inf\"\n          id={`${id}Id`}\n        />\n      </label>\n    );\n  }\n\n  return <></>;\n};\n","import { Input } from './Input';\nimport './Options.scss';\n\ninterface Props {\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n  sS: {\n    step: React.Dispatch<React.SetStateAction<number>>,\n    frameSize: React.Dispatch<React.SetStateAction<number>>,\n    itemWidth: React.Dispatch<React.SetStateAction<number>>,\n    animationDuration: React.Dispatch<React.SetStateAction<number>>,\n    infinite: React.Dispatch<React.SetStateAction<boolean>>,\n  },\n}\n\nexport const Options = (props: Props) => {\n  const {\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n    infinite,\n    sS,\n  } = props;\n\n  const inputs:{\n    type: 'number' | 'boolean',\n    name: string,\n    id: string,\n    value: number | boolean,\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  }[] = [\n    {\n      type: 'number',\n      name: 'Step',\n      id: 'step',\n      value: step,\n      handleChange: (e: React.ChangeEvent<HTMLInputElement>) => sS\n        .step(Number.parseInt(e.target.value, 10)),\n    },\n    {\n      type: 'number',\n      name: 'Frame size',\n      id: 'frame',\n      value: frameSize,\n      handleChange: (e: React.ChangeEvent<HTMLInputElement>) => sS\n        .frameSize(Number.parseInt(e.target.value, 10)),\n    },\n    {\n      type: 'number',\n      name: 'Item width',\n      id: 'item',\n      value: itemWidth,\n      handleChange: (e: React.ChangeEvent<HTMLInputElement>) => sS\n        .itemWidth(Number.parseInt(e.target.value, 10)),\n    },\n    {\n      type: 'number',\n      name: 'Animation duration',\n      id: 'animation',\n      value: animationDuration,\n      handleChange: (e: React.ChangeEvent<HTMLInputElement>) => sS\n        .animationDuration(Number.parseInt(e.target.value, 10)),\n    },\n    {\n      type: 'boolean',\n      name: 'Infinite',\n      id: 'inf',\n      value: infinite,\n      handleChange: (e: React.ChangeEvent<HTMLInputElement>) => sS\n        .infinite(Boolean(e.target.checked)),\n    },\n  ];\n\n  return (\n    <div className=\"Options\">\n      {inputs.map(inp => (\n        <Input key={inp.name} props={inp} />\n      ))}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\nimport { Options } from './components/Options';\n\nconst App = () => {\n  const [step, setStep] = useState(3);\n  const [frameSize, setFrameSize] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [animationDuration, setAnimationDuration] = useState(1);\n  const [infinite, setInfinite] = useState(false);\n  const images = [\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ];\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h1\n          className=\"title\"\n          data-cy=\"title\"\n        >\n          {/* eslint-disable-next-line */}\n          Carousel with {images.length} images\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step || 0}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n\n      <Options\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n        sS={{\n          step: setStep,\n          frameSize: setFrameSize,\n          itemWidth: setItemWidth,\n          animationDuration: setAnimationDuration,\n          infinite: setInfinite,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}